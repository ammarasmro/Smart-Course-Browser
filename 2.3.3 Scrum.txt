[MUSIC] I've mentioned the agile practice of
Scrum a couple times throughout this specialization. It's come time for you to learn it. In this lesson, you will get a basic
understanding of the structure and practices of Scrum. You will be learning more of
the specific Scrum techniques throughout this specialization. So what's all the hype around Scrum? Scrum is a lightweight
practice that doesn't take too much time away from production and
has relatively little overhead. It's simple to understand,
but very difficult to master. Scrum uses an approach that is
both iterative and incremental. You never go very long before assessing
where you are with the product. This enhances predictability and
mitigates risk. Scrum is based on three pillars,
Transparency, Inspection, and Adaptation. First, let's look at Transparency. Transparency means that everyone can
see every part of the project. This visibility is accessible to both
the people on the Scrum Team and those outside. An important part of Transparency
is agreeing on common standards for the project. This means agreeing on common terminology
to use through development, and agreeing on what it means for
a feature to be "Done". You and I will be talking about what
"Done" means later in this lesson. Next, let's look at Inspection. Scrum encourages frequent
inspection of work products and progress to detect undesirable
deviations from expectations. Ken Schwaber, a Scrum trainer and author,
says, "Scrum is like your mother-in-law, it points out all your faults." And
it's true. Developers are sometimes
hesitant to adopt Scrum because it points out everything
they're not doing right. These inspections should
happen frequently. But not so frequent that they get
in the way of development tasks. Finally, let's look at Adaptation. During an inspection when someone
finds that the product development is starting to stray from the vision,
the team must adjust and adapt to prevent further deviation. Scrum outlines four specific techniques
for Inspection and Adaptation. They are Sprint Planning, Daily Scrum,
Sprint Review, and Sprint Retrospective. You will learn these techniques
in the courses on Agile Planning and Reviews and Metrics. I mentioned the term Scrum Team
earlier in this lesson. One role in the Scrum Team
is called a product owner. What is the primary task
of the product owner? A, They purchase the product from a store. B, They pay for the product to be created. C, They are in charge of making
decisions about the product. Or D, They organize the development
team to be more effective. The product owner is a roll in Scrum that
we will be examining in more detail. Their primary task is to make decisions
about the product and the product backlog. Therefore, C is the correct answer. A Scrum Team consists of a Product Owner,
the Development Team, and the Scrum Master. You just learned that
the Product Owner is responsible for making decisions about the product and
the product backlog. They prioritize the requirements
in the Product Backlog and decide what actually gets built. You will learn about the Product Backlog
in the Client Needs and Software Requirements course. The Product Owner is one person and
not a committee. The product owner could
represent a committee but only the product owner can
implement changes to the product It is the responsibility of the product
owner to provide the scrum team with a clearly defined product backlog,
and then prioritize that backlog. The priorities that the Product Owner
specifies must be respected and developed in that order. They have the ultimate say
on what gets developed. It is also the duty of the Product Owner
to make sure that the Development Team understands what is expected for
the features in the backlog. You are the Software Product Manager who
has been hired to work on a running app for a major athletic apparel company. In your first meeting with your
Development Team and Penny, the representative from the company.
The Development Team decided to use Scrum. Penny was appointed
as the Product Owner. Your team is halfway into development and you get an email from
the CEO of the company. He is requesting a pre-made running playlist
users can listen to when they run. You know that your Development Team
had already talked to Penny about this feature. And they decided as a team that they
wouldn't implement this feature in favor of another one. Following the practices of Scrum,
what should you do? A, Send them an email back saying,
"No, you get no say in this project". B, Tell your development team to
add the feature to the backlog. C, Tell your development team to
develop the feature for this iteration. Or D, Send them back an email asking for all feature requests
to come through Penny. In Scrum, all decisions about the product
must come from the Product Owner. Does that mean that you reject
the CEO of the company? No, that's just bad business sense. Your best bet is to send a polite
email to the CEO with a copy to the Product Owner asking that all feature
requests come through the Product Owner. The purpose of having the one point of
contact is to reduce miscommunications. Too much direction coming from multiple
sources will lead to confusion for the development team and most likely
waste the development time and resources. You don't want to bring this to your
development team until you've confirmed that this feature is what
the Product Owner wants. Therefore, D is the correct answer. Let's look at some aspects
of a Scrum development team. Scrum development teams
are self organizing. This means that no one, not even the Scrum
Master, can tell the team how to take their backlog of features and turn them
into increments of working software. Scrum development teams
are also cross functional. This means that the team
consists of everyone and everything that they need
to complete the product. This can include involving
specialists from different areas. The team should not depend on
anyone who is not part of the team. Also, team members take
on a variety of tasks. Like doing both coding and testing rather
than having dedicated coders and testers. So the members of the development
team have no titles. They should only ever be
referred to as developer or their name, regardless of whether they
are responsible for a specific task. There are also no sub-teams in
the Scrum development team. Developers may have a specialized
skill within the team. However, accountability
belongs to the entire team. Scrum development teams are small. Ideally, they are larger than three and
less than nine. The Scrum Master and Product Owner
are not included in that number, unless they are contributing
to development. A good rule of thumb is you should be able
to feed your entire team with two pizzas. Pizzas are also great for team morale. You are at a conference
on Scrum practices. You have been talking to several
other software product managers about their development teams. The first SPM you talk to is named Kelsey. She describes her team as having
four programmers, two testers, and one user interface designer. Next, you meet Jim. He says his current team
consists of 20 developers. Next, you meet Billy. He simply, says that he has a very
talented team of seven developers. Then you run into an old friend, Carrie. She says her team has nine developers. Five are on the development team and
four are on the testing team. Finally, you meet a new software
product manager, Hillary. She says her team consists
of just three developers and they subcontract out their testing. Which of these software product
managers- if any- have a true Scrum development team? A, Kelsey. B, Jim. C, Billy. D, Carrie. Or E, Hillary. These are all examples of development
teams that you will commonly see. However, only Billy has a true
Scrum development team. There are no titles or sub-teams. And the team is cross functional and
an appropriate size. Kelsey's team had titles. Jim's team was too large. Carrie's team had sub-teams. And Hilary's team is not cross functional
because they subcontract out the testing. Therefore, C is the only correct answer. Finally, let's talk about
the role of the Scrum Master. It's the Scrum Master's duty to make sure
that the Scrum team is adhering to Scrum theory, practices, and rules. They have specific duties to both the
Product Owner and the Development Team. The Scrum Master's responsibilities
to the Product Owner include, finding techniques to manage the backlog. Helping the scrum team to understand
the need for a clear and concise backlog. Ensuring the product owner knows
how to prioritize the backlog to get maximum value. And facilitating scrum events. The Scrum Master's duties to
the development team include coaching the team to self-organize. Removing development roadblocks. And facilitating scrum events. So what are these Scrum events that
the Scrum Masters are responsible for facilitating? These Scrum events include those four
techniques for Inspection and Adaptation. Sprint Planning, Daily Scrum,
Sprint Review, and Sprint Retrospective. Again, you will cover these events in more
detail throughout this specialization. All of these events are time boxed,
meaning you need to specify a maximum time for the duration of
these events and adhere to that. The idea behind this is to
maintain the allotted time and adjust the scope, rather than keeping the
scope and eventually delaying releases. Another Scrum event is a Sprint. A Sprint is a development phase
of a specific amount of time, in which a working prototype
is delivered to the client. These Sprints are also time boxed,
but more strictly enforced. A Sprint lasts one month or
less, typically 1 or 2 weeks. Once your Scrum Team specifies
the length of your Sprints, they must consistently stay that
length for the entire development. Sprints cannot be made longer or shorter. At the end of each Sprint, the client
is delivered a working prototype. Each Sprint contains the four
Scrum events I mentioned earlier. Spring planning occurs at
the beginning of the current Sprint to determine what will be
completed in that Sprint. The daily Scrum is a meeting that occurs,
you guessed it, daily. It normally takes place at
the beginning of each day, so that the developers can talk about
what tasks they will be doing and what they need to accomplish these tasks. The Sprint review and retrospectives
take place at the end of the Sprint. During the Sprint, no changes can be
made that will affect the Sprint goal. The Sprint goal is the big picture view
of what is going to get done that Sprint. Suggestions that will change the Sprint
goal will go in the Backlog and can be implemented in the next Sprint if
that's what the Product Owner decides. Lets say your team is developing a mobile
app that allows users to search for food and
drink specials at local restaurants. The Sprint goal for this Iteration
is to set up the user interface. This is everything that the end
user will see and interact with. Halfway through the Sprint, the client sends you an email saying
that they've changed their mind. They want the main colors of
the application to be blue and white instead of red and black. This is a quick fix for
the development team. The client also requests that they want
the application to now support ads that pop up on the screen. Which of these changes can be
made in the current sprint? A, The color change. B, Popup ads. C, Both of them. Or D, Neither of them. Changing the color of the application
is a minor change that doesn't affect the sprint goal. So that change could be
implemented mid-sprint. Adding popup ads will
take more development and does not fit with the sprint goal. This should be added to the product
backlog and revisited at a future sprint. Therefore, A is the correct answer. An important part of Scrum is
the definition of Done. The working prototype that is
delivered at the end of a Sprint must be Done. It is the responsibility of the
development team to define the qualities that determine when a product is Done. Typically, a feature is considered Done
when the feature is coded, tested, and documented. The team must completely
agree on what Done means. If you recall from the agile manifesto, progress should be
tracked by Done features. The purpose of this is to avoid
having work in half-done states. This can result in the team
working independently and looking busy without
accomplishing anything usable. To get a feature Done requires
communication, integration, and synchronization. This sometimes requires that
the development proceeds slowly to ensure that each feature is truly Done. Like XP, proponents of Scrum
recommend an all or nothing approach. However, Scrum practices can
be implemented individually, as they stand alone better
than some XP practices. If you implement
the practices individually, then you are not practicing Scrum. True Scrum requires that is
it practiced in its entirety. As I mentioned in the introductory course,
Scrum is used by many major tech companies like Adobe, Amazon, Microsoft, and Yahoo. If you want to learn more about Scrum,
you can go to scrumguides.org. Check out the course resources for
the latest link. Although Scrum is a popular methodology,
it still has some flaws. What do you think are some
downfalls with Scrum? Talk about it in the course discussion. You will continue to
examine more practices and methodologies in the next module.